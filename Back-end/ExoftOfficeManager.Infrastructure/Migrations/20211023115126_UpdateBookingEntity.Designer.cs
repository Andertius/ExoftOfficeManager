// <auto-generated />
using System;
using ExoftOfficeManager.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ExoftOfficeManager.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20211023115126_UpdateBookingEntity")]
    partial class UpdateBookingEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ExoftOfficeManager.Domain.Entities.Booking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DayNumber")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("WorkPlaceId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkPlaceId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("ExoftOfficeManager.Domain.Entities.Meeting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("MeetingPurpose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("ExoftOfficeManager.Domain.Entities.NotRequiredUserMeeting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<long>("MeetingId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.HasIndex("UserId");

                    b.ToTable("NotRequiredUserMeeting");
                });

            modelBuilder.Entity("ExoftOfficeManager.Domain.Entities.RequiredUserMeeting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<long>("MeetingId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.HasIndex("UserId");

                    b.ToTable("RequiredUserMeeting");
                });

            modelBuilder.Entity("ExoftOfficeManager.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ExoftOfficeManager.Domain.Entities.WorkPlace", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("int");

                    b.Property<int>("PlaceNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("WorkPlaces");
                });

            modelBuilder.Entity("ExoftOfficeManager.Domain.Entities.Booking", b =>
                {
                    b.HasOne("ExoftOfficeManager.Domain.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId");

                    b.HasOne("ExoftOfficeManager.Domain.Entities.WorkPlace", "WorkPlace")
                        .WithMany("Bookings")
                        .HasForeignKey("WorkPlaceId");

                    b.Navigation("User");

                    b.Navigation("WorkPlace");
                });

            modelBuilder.Entity("ExoftOfficeManager.Domain.Entities.Meeting", b =>
                {
                    b.HasOne("ExoftOfficeManager.Domain.Entities.User", "Owner")
                        .WithMany("OwnerMeetings")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ExoftOfficeManager.Domain.Entities.NotRequiredUserMeeting", b =>
                {
                    b.HasOne("ExoftOfficeManager.Domain.Entities.Meeting", "Meeting")
                        .WithMany("NotRequiredUserMeetings")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ExoftOfficeManager.Domain.Entities.User", "NotRequiredUser")
                        .WithMany("NotRequiredUserMeetings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Meeting");

                    b.Navigation("NotRequiredUser");
                });

            modelBuilder.Entity("ExoftOfficeManager.Domain.Entities.RequiredUserMeeting", b =>
                {
                    b.HasOne("ExoftOfficeManager.Domain.Entities.Meeting", "Meeting")
                        .WithMany("RequiredUserMeetings")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ExoftOfficeManager.Domain.Entities.User", "RequiredUser")
                        .WithMany("RequiredUserMeetings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Meeting");

                    b.Navigation("RequiredUser");
                });

            modelBuilder.Entity("ExoftOfficeManager.Domain.Entities.Meeting", b =>
                {
                    b.Navigation("NotRequiredUserMeetings");

                    b.Navigation("RequiredUserMeetings");
                });

            modelBuilder.Entity("ExoftOfficeManager.Domain.Entities.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("NotRequiredUserMeetings");

                    b.Navigation("OwnerMeetings");

                    b.Navigation("RequiredUserMeetings");
                });

            modelBuilder.Entity("ExoftOfficeManager.Domain.Entities.WorkPlace", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
